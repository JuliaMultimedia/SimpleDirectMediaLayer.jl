using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libSDL2"], :libSDL2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/jonathanBieler/SDL2Builder/releases/download/v0.1.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/SDL2.v0.1.0.aarch64-linux-gnu.tar.gz", "dde349fe5ad22768665a1567d5f5ab3169cb2f3f4e79261f6845647311ce59e4"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/SDL2.v0.1.0.aarch64-linux-musl.tar.gz", "dd6a8286a128fa10a8948f69bbbb73e1bfa53d22a06627be18cfd2b787981d95"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/SDL2.v0.1.0.arm-linux-gnueabihf.tar.gz", "9d81468ed7d4af5d746344cf9351a8811257e0a7e4ddfc51d929c76d3ff3b29a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/SDL2.v0.1.0.arm-linux-musleabihf.tar.gz", "51e9e302e858bc9579b4b7f44f8a2725949b469d4e9db6785222934b3ceef2b7"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SDL2.v0.1.0.i686-linux-gnu.tar.gz", "d5d25d8500e83359006f6d3b664f2dc141dfcb70f87360f07a9926ac6da00d5b"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/SDL2.v0.1.0.i686-linux-musl.tar.gz", "5284a6c09221fd57d1055a2ee15ca86e739ea0c763f09825b054c2d7c58d8a82"),
    Windows(:i686) => ("$bin_prefix/SDL2.v0.1.0.i686-w64-mingw32.tar.gz", "7bb623cf207b0e4f8197fc71f4527d04dc2b39618c547e774ad2e3db96263f18"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/SDL2.v0.1.0.powerpc64le-linux-gnu.tar.gz", "6fc174cd0c4e0aa81a040e8b0b74803e48b2440268c1898ccd0540909213ea7f"),
    MacOS(:x86_64) => ("$bin_prefix/SDL2.v0.1.0.x86_64-apple-darwin14.tar.gz", "8e21a830fb7ee9ed6d549c38113b8eb4f89030c0ab2b5a586d00550369a2498d"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SDL2.v0.1.0.x86_64-linux-gnu.tar.gz", "aebc7bc8f964e16ea25b6647aba9883b47f2e489d4aadbb476b4b081cf285cbd"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/SDL2.v0.1.0.x86_64-linux-musl.tar.gz", "6aac8dba4c6fcd383c4fdfb26b65c3a1fd97886bc256ce2bd8aac7d1f52980a3"),
    FreeBSD(:x86_64) => ("$bin_prefix/SDL2.v0.1.0.x86_64-unknown-freebsd11.1.tar.gz", "bd2aa0811f7c3b06ce43c63d0315bf970d9dfd80b6e3a4c20dd6f7a7cc393b60"),
    Windows(:x86_64) => ("$bin_prefix/SDL2.v0.1.0.x86_64-w64-mingw32.tar.gz", "16be7be10fde61bc01807b25689d308e97cfaacbf0c8a8bedf22bc3fa3ed1c65"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
